Hello!
For compiling to assembly your code you need to run emulator.c file using c compiler or emulator.exe. But it you want to run got assembly you can run yourself using nasm x86 assembly or directly run in file manager using "run" command.

Variables: 
For creating varible you need to declare :  dataType  name = value
DataType can be int or char( later will be implemented more dataTypes)) ( value can be string or
integer( later will be added more variants like true or false, imaginary numbers, numbers with floating point ext.))

Functions: 
For printing in console: write name
For getting input from user: read dataType name


If, while, for: 
For if, while and for and for you can use ==, !=,>,<,>=,<=( == compare if arguments are equal, != compare if arguments are not equal, > and < as in mathematics compare first with second argument, >= and <= compare if first or second arguments is greater or euqal)
for if you need to declare: if val1 sign val2
for for you need to declare: for val1 sign val2 val3 operator
(val1,val2,val3 are variables) (sign is comparing operator(==, !=,>,<,>=,<=)) (operator is arithmetic operator)
for while you need to declare: while val1 sign val2
To end a if,for,while loop you need to write: end
(if 'if' loop was used, code will jump to "continue_:" , if "for" or "while" was used, code will jump back)

Arrays: 
For declaring array you need write : dataType name[variableAmountLimit]= var, var, var
(dataTypa can ba int or char( later will be other types), name can be any string, variableAmountLimit is variable amount limit :), var can be any value or variable) (if array is char array you need to also decalare all array string character limit as in c)

Sections: 
Sections as in assembly allows you to declare different variables or start a specific part of code.
For creating section for variables you need to declare: section .data

Functions:

For creating function you need to declare: returnType function name
(returnType as dataType for variables)( name can be any char[] (string) )
for return you need to declare: return value
(value  can be integer or char variable, integer or char)








